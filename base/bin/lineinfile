#!/usr/bin/env bash

# lineinfile.sh
#
# Usage:
#   lineinfile.sh <file> <regexp> <line> [present|absent] [before|after]
#
# Options:
#   <file>        The target file to operate on.
#   <regexp>      A regular expression that identifies the line(s) to match.
#   <line>        The line to insert or replace with. Ignored if state is 'absent'.
#   [present|absent]
#                 (Optional) If 'present' (default), ensures the line is present as specified.
#                 If 'absent', ensures all matching lines are removed.
#   [before|after]
#                 (Optional, only with 'present') If specified, inserts <line> before or after the
#                 first matching line instead of replacing it. If no matching line is found,
#                 the line is appended to the file.
#
# Behavior:
#   * present (default):
#       - No before/after: Replaces the entire first matching line with <line>. If no match, appends <line>.
#       - before: Inserts <line> before the first line matching <regexp>. If no match, appends <line>.
#       - after:  Inserts <line> after the first line matching <regexp>. If no match, appends <line>.
#   * absent:
#       - Deletes all lines matching <regexp>.
#
# Notes:
#   - This script creates a backup of the file as <file>.bak before modifying it.
#   - Only the first matching line is considered for replacement, before, or after insertions (like Ansible).
#   - The script does not support more advanced Ansible features such as inserting at BOF/EOF, backup control, or validation commands.
#
# Examples:
#   lineinfile.sh /etc/hosts '^127\.0\.0\.1' '127.0.0.1 localhost'
#   lineinfile.sh /etc/sudoers '^%wheel' '' absent
#   lineinfile.sh config.txt '^FOO=' 'FOO=bar' present before

file="$1"
regexp="$2"
line="$3"
state="${4:-present}" # default to 'present' if not specified
insertpos="$5"        # 'before', 'after', or empty

if [[ -z "$file" || -z "$regexp" ]]; then
    echo "Usage: $0 <file> <regexp> <line> [present|absent] [before|after]"
    exit 1
fi

if [[ "$state" == "present" ]]; then
    if [[ "$insertpos" == "before" ]]; then
        if grep -qE "$regexp" "$file"; then
            # Insert before the first matching line
            sed -i.bak -E "0,/$regexp/{/$regexp/i\\
$line
}" "$file"
        else
            # Append if not present
            echo "$line" >> "$file"
        fi
    elif [[ "$insertpos" == "after" ]]; then
        if grep -qE "$regexp" "$file"; then
            # Insert after the first matching line
            sed -i.bak -E "0,/$regexp/{/$regexp/a\\
$line
}" "$file"
        else
            # Append if not present
            echo "$line" >> "$file"
        fi
    else
        if grep -qE "$regexp" "$file"; then
            # Replace the entire matching line
	    sed -i.bak -E "0,/$regexp/{s|^($regexp).*$|$line|}" "$file"
        else
            # Append the line if not present
            echo "$line" >> "$file"
        fi
    fi
elif [[ "$state" == "absent" ]]; then
    # Delete the matching line
    sed -i.bak -E "/$regexp/d" "$file"
fi
