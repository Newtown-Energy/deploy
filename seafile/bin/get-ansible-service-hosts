#!/usr/bin/env python3

import argparse
import os
import sys
import subprocess

try:
    from ansible.parsing.dataloader import DataLoader
    from ansible.inventory.manager import InventoryManager
except ImportError:
    print("Error: ansible package not found. Install with: pip install ansible", file=sys.stderr)
    sys.exit(1)

parser = argparse.ArgumentParser(description='Get hosts for a service from Ansible inventory')
parser.add_argument('service_name', help='Name of the service to look up')
parser.add_argument('--inventory', '-i', 
                   default=f"{os.environ.get('NEWTOWN_DIR', '')}/src/deploy/ansible/inventory.yml",
                   help='Path to inventory file (default: $NEWTOWN_DIR/src/deploy/ansible/inventory.yml)')
parser.add_argument('--resolve', action='store_true',
                   help='Resolve inventory names to FQDN or IP addresses using resolve-ansible-host')

def main():
    args = parser.parse_args()
    service_name = args.service_name
    inventory_path = args.inventory
    
    try:
        # Initialize Ansible data loader and inventory manager
        loader = DataLoader()
        inventory = InventoryManager(loader=loader, sources=[inventory_path])
        
        # Get all groups
        groups_dict = inventory.get_groups_dict()
        
        if service_name in groups_dict:
            # Get hosts for the service group
            hosts_data = groups_dict[service_name]
            
            # Handle different host data formats
            if isinstance(hosts_data, str):
                # Single string with space-separated hosts
                hosts = hosts_data.split()
            elif isinstance(hosts_data, list):
                # List that might contain space-separated host strings
                hosts = []
                for item in hosts_data:
                    hosts.extend(str(item).split())
            else:
                hosts = [str(hosts_data)]
            
            # Print each host on a separate line
            for host in hosts:
                if args.resolve:
                    try:
                        # Call resolve-ansible-host to get FQDN/IP
                        result = subprocess.run(['resolve-ansible-host', host], 
                                              capture_output=True, text=True, check=True)
                        resolved_host = result.stdout.strip()
                        print(resolved_host)
                    except subprocess.CalledProcessError:
                        # If resolve fails, fall back to original host name
                        print(host)
                    except FileNotFoundError:
                        print(f"Error: resolve-ansible-host command not found", file=sys.stderr)
                        print(host)
                else:
                    print(host)
        else:
            print(f"Service '{service_name}' not found in inventory", file=sys.stderr)
            sys.exit(1)
            
    except FileNotFoundError:
        print(f"Inventory file not found: {inventory_path}", file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        print(f"Error processing inventory: {e}", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    main()
